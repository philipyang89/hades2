// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  comments  Comment[]
  likes     Like[]
}

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  article     Article    @relation(fields: [articleId], references: [id])
  articleId   String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?    // For replies
  replies     Comment[]  @relation("CommentReplies")
  likes       Like[]
}

model Like {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  comment     Comment    @relation(fields: [commentId], references: [id])
  commentId   String
  createdAt   DateTime   @default(now())
  notified    Boolean    @default(false) // Use this to mark whether notification was sent/seen

  @@unique([userId, commentId]) // Only one like per user per comment
}